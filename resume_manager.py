import logging
import os
import glob
import re # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö regex ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å username ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
from datetime import datetime
import asyncio
import threading
from openpyxl import load_workbook # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö get_processed_image_filenames
from telegram.ext import ContextTypes # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á ContextTypes ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

# ‡∏ï‡πâ‡∏≠‡∏á Import ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏¢‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
# ‡∏ñ‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏£‡∏±‡∏ö import ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
# ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÇ‡∏°‡∏î‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á ocr_processor.py, excel_manager.py, sqlite_manager.py ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
# ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ import ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ

# ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å import ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
# ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

# ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÅ‡∏Ñ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
# ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£ import ocr_processor, excel_manager, sqlite_manager
# ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏à‡∏≤‡∏Å config (‡πÄ‡∏ä‡πà‡∏ô IMAGE_FOLDER, EXCEL_FILENAME, ML_FEEDBACK_DB) ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ
# ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‡∏ú‡∏°‡∏à‡∏∞‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Constants ‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
# (extract_timestamp_from_image_ocr, append_to_excel, insert_missed_timestamp_record)
# ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å context ‡∏´‡∏£‡∏∑‡∏≠ global scope (‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á)
# ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ "‡πÅ‡∏Ñ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å"
# ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô dependencies ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

def get_processed_image_filenames(excel_filename_param):
    """
    Reads the Excel file and returns a set of image filenames that have already been processed.
    """
    processed_files = set()
    try:
        if os.path.exists(excel_filename_param):
            wb = load_workbook(excel_filename_param)
            ws = wb["ImageMetadata"]
            # ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß header
            for row in ws.iter_rows(min_row=2, values_only=True):
                # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 3 (Index 2)
                if row and len(row) > 2:
                    processed_files.add(row[2])
    except Exception as e:
        logging.error(f"Error reading processed filenames from Excel '{excel_filename_param}': {e}")
    return processed_files

def find_unprocessed_images(image_folder_param, processed_files_set):
    """
    Scans the image_folder for image files that are not in the processed_files set.
    Returns a list of full paths to unprocessed images.
    Expects structure: image_folder/username/date/filename.jpg
    """
    unprocessed_images = []
    # ‡πÉ‡∏ä‡πâ os.walk ‡πÄ‡∏û‡∏∑‡πà‡∏≠ traverse ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for root, dirs, files in os.walk(image_folder_param):
        for img_file_name in files:
            if img_file_name.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')): # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                if img_file_name not in processed_files_set:
                    full_path = os.path.join(root, img_file_name)
                    unprocessed_images.append(full_path)
    return unprocessed_images

def process_single_unprocessed_image(
    loop, # asyncio event loop ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏£‡∏î‡∏´‡∏•‡∏±‡∏Å
    context, # ContextTypes.DEFAULT_TYPE ‡∏à‡∏≤‡∏Å telegram.ext
    full_image_path: str,
    # ‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    # ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å global scope ‡πÑ‡∏î‡πâ
    extract_timestamp_func,
    append_to_excel_func,
    insert_missed_record_func,
    excel_filename_param,
    ml_feedback_db_param,
    image_folder_param
):
    """
    Processes a single unprocessed image (OCR, Excel/SQLite logging).
    This function simulates the work done by process_photo_thread_target but for existing files.
    """
    logging.info(f"[RESUME] Processing unprocessed image: {full_image_path}")

    filename_with_suffix = os.path.basename(full_image_path)
    
    # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á username ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô)
    # ‡πÄ‡∏ä‡πà‡∏ô "username-logYYYY-MM-DD-######.jpg"
    username_match = re.match(r'(.+)-log\d{4}-\d{2}-\d{2}-', filename_with_suffix)
    username = username_match.group(1) if username_match else "unknown_user"
    
    bot_timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    extracted_image_timestamp = None
    try:
        extracted_image_timestamp = extract_timestamp_func(full_image_path)

        if extracted_image_timestamp:
            logging.info(f"[RESUME] üì∏ Extracted Timestamp from image: {extracted_image_timestamp}")
        else:
            logging.warning(f"[RESUME] ‚ö†Ô∏è Could not extract timestamp from image: {filename_with_suffix}. Logging to SQLite.")
            insert_missed_record_func(filename_with_suffix, bot_timestamp)

    except Exception as e:
        logging.error(f"[RESUME] üî• Error during image OCR for '{filename_with_suffix}': {e}")
    
    try:
        extracted_image_timestamp_str = extracted_image_timestamp.strftime("%Y-%m-%d %H:%M:%S") if extracted_image_timestamp else "N/A"
        append_to_excel_func(username, bot_timestamp, filename_with_suffix, extracted_image_timestamp_str)
        logging.info(f"[RESUME] ‚úÖ Inserted record for '{filename_with_suffix}' into Excel.")
    except Exception as e:
        logging.error(f"[RESUME] ‚ùå Excel write error for '{filename_with_suffix}': {e}")
        
    logging.info(f"[RESUME] Finished processing for {filename_with_suffix}")

def resume_unprocessed_tasks_init(context: ContextTypes.DEFAULT_TYPE,
                                  image_folder_param, excel_filename_param, ml_feedback_db_param,
                                  extract_timestamp_func, append_to_excel_func, insert_missed_record_func):
    """
    Initiates the process of finding and processing any unprocessed images.
    This runs when the bot starts up.
    """
    logging.info("Checking for any unprocessed images from previous sessions...")
    
    processed_files_set = get_processed_image_filenames(excel_filename_param)
    
    unprocessed_images = find_unprocessed_images(image_folder_param, processed_files_set)
    
    if unprocessed_images:
        logging.info(f"Found {len(unprocessed_images)} unprocessed images. Starting background processing...")
        current_loop = asyncio.get_event_loop()
        for img_path in unprocessed_images:
            thread = threading.Thread(target=process_single_unprocessed_image, 
                                      args=(current_loop, context, img_path,
                                            extract_timestamp_func, append_to_excel_func, insert_missed_record_func,
                                            excel_filename_param, ml_feedback_db_param, image_folder_param))
            thread.start()
    else:
        logging.info("No unprocessed images found. All tasks are up-to-date.")